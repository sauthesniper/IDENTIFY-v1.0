#include <PCM.h>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_PN532.h>
#include <SoftwareSerial.h>
#include <LiquidCrystal.h>
#include <Keypad.h>
#include <LiquidCrystal_I2C.h>
#define PN532_SCK  (52)
#define PN532_MOSI (51)
#define PN532_SS   (53)
#define PN532_MISO (50)
Adafruit_PN532 nfc(PN532_SCK, PN532_MISO, PN532_MOSI, PN532_SS);
LiquidCrystal lcd(32,30,22,24,28,26);
LiquidCrystal_I2C lcd2(0x27,16,2);
char lastT; int mode=3;
long long unsigned resetTime=millis();
SoftwareSerial mySerial(10,11);
String apn = "live.vodafone.com";   
String apn_username = "";
String url = "http://youlearninfo.ro/get_method.php";

const byte ROWS = 4; const byte COLS = 4; 
char keys[ROWS][COLS] = {{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};
byte rowPins[ROWS] = {37, 35, 33, 31};byte colPins[COLS] = {45, 43, 41 ,39};
int EnteredPin[10],CheckPin[10]={1,2,3,4},pinCounter=0;
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

void send_to_serial(String command,int importance) {
  mySerial.println(command);char tmp[1000]; int tmpindex=0;
  if (importance==500)
  {
     while (!mySerial.available()) delay(15);
      while (mySerial.available()) 
      {
        char t=mySerial.read();
        tmp[++tmpindex]=t;
        Serial.print(t);
        delay(5);
      }
    while (!mySerial.available()) delay(15);
      while (mySerial.available()) 
      {
        char t=mySerial.read();
        tmp[++tmpindex]=t;
        Serial.print(t);
        delay(5);
      }
      return;
  }
if (importance==101)
    {
      while (tmp[tmpindex-1]!='O'&&tmp[tmpindex]!='K') 
        while (mySerial.available()) 
        {
          char t=mySerial.read();
          tmp[++tmpindex]=t;
          Serial.print(t);
        }
        return;
    }
if (importance==201){
     while (!mySerial.available()) delay(30);
      while (mySerial.available()) 
      {
        char t=mySerial.read();
        tmp[++tmpindex]=t;
        Serial.print(t);
        delay(10);
      }
      return;
  }
  
  {
  long  wait=millis()+importance*250;
  while (millis() < wait ) 
    while (mySerial.available()) 
    {
      char t=mySerial.read();
      tmp[++tmpindex]=t;
      Serial.print(t);
    }    
  }

}
void readSerial()
{
    while (mySerial.available()) 
      Serial.write(mySerial.read());
}
void configure_gprs() 
{
  Serial.println(" --- CONFIGURARE GPRS --- ");
  send_to_serial("AT+SAPBR=3,1,Contype,GPRS",101);
  send_to_serial("AT+SAPBR=3,1,APN," + apn ,101);
  send_to_serial("AT+SAPBR=1,1",101);
  send_to_serial("AT+SAPBR=2,1",101);
  send_to_serial("AT+HTTPINIT",101); 
  send_to_serial("AT+HTTPPARA=CID,1",101); 
}
void send_to_server( String data) 
{
  String sendURL = url+"?val="+data+"&key=E9873D79C6D87DC0FB6A57786333891273AICSIACU1231F4453213303DA61F20BD67FC233AA33262";
  send_to_serial("AT+HTTPPARA=URL," + sendURL,101); 
  send_to_serial("AT+HTTPPARA=CONTENT,application/x-www-form-urlencoded",101);
  send_to_serial("AT+HTTPDATA=192,1000",201);
  send_to_serial(data,101);
  send_to_serial("AT+HTTPACTION=1",500);
  mySerial.println("AT+HTTPREAD");delay(200);
    char srv_data[105]; int srv_data_index=0,i=1;
    while (mySerial.available()) 
      {
        char t=mySerial.read();
        srv_data[++srv_data_index]=t;
      }
   while (!(srv_data[i]=='R'&&srv_data[i+1]==':')) i++;
   if (srv_data[i+2]=='D') accesDenied();
   else accesGranted();
}
void send_pin_to_server( String data) 
{
  String sendURL = url+"?val="+data+"&key=ABNSDHUJ123780FB6A57786333891273AICSIACU123189712938BASJKHDGUIBD67FC212312ASRDF62";
  send_to_serial("AT+HTTPPARA=URL," + sendURL,101); 
  send_to_serial("AT+HTTPPARA=CONTENT,application/x-www-form-urlencoded",101);
  send_to_serial("AT+HTTPDATA=192,1000",201);
  send_to_serial(data,101);
  send_to_serial("AT+HTTPACTION=1",500);
  mySerial.println("AT+HTTPREAD");delay(200);
    char srv_data[105]; int srv_data_index=0,i=1;
    while (mySerial.available()) 
      {
        char t=mySerial.read();
        srv_data[++srv_data_index]=t;
      }
   while (!(srv_data[i]=='R'&&srv_data[i+1]==':')) i++;
   if (srv_data[i+2]=='D') 
      { 
          lcd.clear();
          lcd.setCursor(4,2);
          pinCounter=0;
         lcd.print("PIN INVALID !");delay(1000);
         pinCounter=0;delay(4000);
         lcd.clear();mode=3;homeScreen();
      }
   else
  {
    lcd.clear();
    lcd.setCursor(4,2);
    lcd.print("PIN CORECT !");
    delay(1500);
    pinCounter=0;delay(4000);
    lcd.clear();mode=3;homeScreen();
  }
}

void passiveScreen()
{
  lcd.clear();
  lcd.setCursor(3,1);
  lcd.print("APROPIATI CARDUL");
  lcd.setCursor(12,3);
  lcd.print("IDentify");
}
void searchingScreen()
{
  lcd.clear();
  lcd.setCursor(1,1);lcd.print("INDEPARTATI CARDUL");
  long t=millis()+1000;
  while (millis()<t) ;
  lcd.clear();
  lcd.setCursor(3,1);lcd.print("PROCESAM CEREREA");
  lcd.setCursor(0,2);lcd.print("VA RUGAM, ASTEPTATI!");
}
void accesGranted()
{
  lcd.clear();
  lcd.setCursor(0,1);lcd.print("ACCESUL ESTE PERMIS!");
  lcd.setCursor(5,2);lcd.print("MULTUMIM !");  
  long t=millis()+2000;
  while (millis()<t) ;
  homeScreen();
}
void homeScreen()
{
  lcd.clear();
  lcd.setCursor(1,0);lcd.print("SELECTATI METODA ");
  lcd.setCursor(4,1);lcd.print("DE VALIDARE:");  
  lcd.setCursor(6,2);lcd.print("> A -> PIN ");
  lcd.setCursor(6,3);lcd.print("> B -> CARD ");
  long t=millis()+1500;
  while (millis()<t) ;
}
void enterPinScreen()
{
  lcd.clear();
  lcd.setCursor(5,0);lcd.print("INTRODUCETI");
  lcd.setCursor(4,1);lcd.print("PIN DE ACCES");  
  long t=millis()+200;
  while (millis()<t) ;
}
void accesDenied()
{
  lcd.clear();
  lcd.setCursor(2,1);lcd.print("ACCES NEPERMIS !");
  lcd.setCursor(5,2);lcd.print("MULTUMIM !");  
  long t=millis()+2000;
  while (millis()<t) ;
  homeScreen();
}
void showTime()
{
  readSerial();
  mySerial.println("AT+CCLK?");
  long  wait=millis()+550;
  while (millis() < wait ) ;
  char dtime[150];int indx=0;
  while (mySerial.available())
    dtime[indx++]=mySerial.read();
  lcd2.clear();
  for (int i=19;i<27;i++) {lcd2.setCursor(i-15,0);lcd2.print(dtime[i]);}
  for (int i=28;i<33;i++) {lcd2.setCursor(i-22,1);lcd2.print(dtime[i]);}
}
void setup()
{
  Serial.begin(9600);
  mySerial.begin(9600);
  nfc.begin();nfc.SAMConfig();
  lcd2.init();lcd2.backlight();
  lcd2.setCursor(2,0); lcd2.print("INITIALIZARE");
  lcd2.setCursor(3,1); lcd2.print("IDEVICE...");
  lcd.begin(20,4);
  configure_gprs();
  while (mySerial.available())
    Serial.write(mySerial.read());
  homeScreen();showTime();
}
void loop()
{
  if (resetTime+60000<millis())
  {
    showTime();resetTime+=60000;
  }
  if(mode==3)
  {
    char key = keypad.getKey();
      if (key)
          if (key=='A') {mode=1;lcd.clear();enterPinScreen();}
            else if (key=='B') {mode=0;lcd.clear();passiveScreen();}
  } else if (mode==0)
  {
    showTime();
    bool read_Succes=0; char tag_id[100]; int current_id_lenght=0;
    uint8_t temp_tag_id[]={0,0,0,0,0,0,0},temp_tag_id_lenght;
    read_Succes=nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A,temp_tag_id,&temp_tag_id_lenght);
    if (read_Succes)
    {
      searchingScreen();
      for(int i=0;i<temp_tag_id_lenght;i++)
      {
        uint8_t t=temp_tag_id[i];
        while (t!=0)
        {
          tag_id[current_id_lenght++]=t%10+48; t/=10;
        }
      }
      String dataforserver;
      int parc=0;
      while (tag_id[parc]>=48&&tag_id[parc]<=57) dataforserver=dataforserver+tag_id[parc++];
      send_to_server(dataforserver);
      delay(500);
      mode=3;
    }    
  } else if (mode==1) {
        char key = keypad.getKey();
        if (key)
        {
          if (pinCounter<=3)
          {
            EnteredPin[pinCounter]=int(key-48);
            pinCounter+=1;
            for (int i=0;i<4;i++)
            {
              lcd.setCursor(i+8,3);
              if (i<pinCounter) lcd.print(char(EnteredPin[i]+48));
              else lcd.print("*");
            }
          }
          if (pinCounter==4)
          {
            bool ok=1; String tmp;
            for (int i=0;i<=3;i++) tmp=tmp+char(EnteredPin[i]+48);
            send_pin_to_server(tmp);
          }          
        }
}
}
